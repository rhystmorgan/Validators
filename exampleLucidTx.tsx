const mintMetadata = async () => {
    if (lucid) {
      const utxos = await lucid.wallet.getUtxos();
      const txOutId = utxos[0].txHash;
      const txId = new Constr(0, [txOutId])
      const txOutRefParam = new Constr(0, [txId, BigInt(utxos[0].outputIndex)]);
      const preMintingCbor = ""
      const preMetadataValidatorCbor = "590a58590a550100002222323232323232323233332222323232325333573466e1d20020021323232323232325333573466e1d200000215335738921495061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f5072654d696e74656456616c696461746f722e68733a3130313a332d35320016132323253335734a6644666ae68008004528199119b87332233333322223333232323002233002002001230022330020020012253335573e002244a00226660066ae84004888c00800c4c008d5d1000999112999ab9a3375e00460060022446004006244a0020080040024644460040066008002244a002aae7555cf1ba900200123332232323002233002002001230022330020020012253335573e00220062660086ae84004c008d5d10009119b80375a6aae780080052000375600229000001000a40040246eacd5d09aba200715332233357340040022940cc88cdc399911999999111199991919180111980100100091801119801001000912999aab9f00112250011333003357420024446004006260046ae88004cc8894ccd5cd19baf002300300112230020031225001004002001232223002003300400112250015573aaae78dd48010009199911919180111980100100091801119801001000912999aab9f00110031330043574200260046ae8800488cdc01bad35573c00400290001bab001148000008005200201237566ae8400c4c8c8c94ccd5cd19b87480080084c8cc8c8c8c0088cc0080080048c0088cc008008004894ccd55cf8008a5015333573466ebcd5d08008018a51130023574400200200a6ea522011c70f7a0125ce7f73ac553d682963d0e2c6aead26fd1e6a4ac30aab8b3001325332233357340040022940cdd79aba100600115332233357340040022940cdc49bad357426ae88018dd69aba1357440182a6644666ae68008004528199991111999191801119801001000918011198010010009112999aab9f002133232323002233002002001230022330020020012253335573e002294454cc88ccd5cd0010008a50300335742002260046ae880048cc02001cdd59aab9e00100113253335573e0042a6644666ae680080045281980400080389991919180111980100100091801119801001000912999aab9f00114a22a6644666ae6800800452818019aba100113002357440024660126eacd55cf0008041aba200313232325333573466e3c00800454cc88ccd5cd0010008a503300b0040031330073574400c6ae8801454ccd5cd19b9000200115332233357340040022940cc02c0100284cc01cd5d10030028a9991199ab9a00200114a06601601400626600e00c6ae88014dd71aab9d357420086eb8d55ce9aba100437566aae78d5d08011bab35573c6ae84008008004c888ccc8c8c0088cc0080080048c0088cc0080080048894ccd55cf80109991919180111980100100091801119801001000912999aab9f00114a22a6644666ae6800800452818019aba10011300235744002466e2401cdd69aab9e00100113253335573e0042a6644666ae6800800452819b89001007133232323002233002002001230022330020020012253335573e002294454cc88ccd5cd0010008a50300335742002260046ae880048cdc49bad35573c0020106ae8800c4c8c8c94ccd5cd19b8f00200115332233357340040022940cdc48020018998039aba20063574400a2a666ae68cdc80010008a9991199ab9a00200114a066e240100284cc01cd5d10030028a9991199ab9a00200114a066e2402800c4cc01c018d5d10029bae35573a6ae84010dd71aab9d357420086eb4d55cf1aba1002375a6aae78d5d0801001000a400097adef6c6037566ae84d5d10059bab3574200e2664646460044660040040024600446600400400244a666aae7c0045280a999ab9a3375e6ae8400400c528898011aba200137529111c70f7a0125ce7f73ac553d682963d0e2c6aead26fd1e6a4ac30aab8b300005357420026aae78008d55ce8009baa010149858dd61aba132357446ae88d5d11aba2357440026ae88020c8d55cf1baa00132323232320055333573466e1d200000213232323232324994ccd55cf8008a4c2a66ae712401317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f0016357440066eb4004d5d08009aba2002357420022a66ae7124013f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f72001635573c0046aae74004dd5000991919192999ab9a3370e900200109aba100115335738921136e6f7420616e20696e6c696e6520646174756d001635573c0046aae74004dd50009aba1357440026ae88c8d55cf1baa0013253335573e0022c264a666aae7c0044d5d08010b1aba200133232323002233002002001230022330020020012253335573e002297ae0132533357346008002266ae80004c00cd5d1001098019aba200235742002644646464a666ae68cdc3a400000429404cdc79bae3574200200a6aae78008d55ce8009baa3235742646aae78dd50008009aba13235573c6ea8004004dd71aba100137586ae84018d55cf0011aab9d0013754646ae84c8d55cf1baa00100135742002646aae78dd5000999119919180111980100100091801119801001000912999aab9f00116132533357346466ebcdd3991aab9e375400200a6e9cc8d55cf1baa0010013574200226ae84d5d1000898019aba20023235573c6ea8004d5d08008011bac357420066ae84010c8d55cf1baa001009357446ae88004c8d55cf1baa001357420082a66ae71241485061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f5072654d696e74656456616c696461746f722e68733a39363a332d3430001635573c0046aae74004dd51aba135744002646aae78dd50008009bae00c00b00a0095333573466e1d200000213232323232324994ccd55cf8008a4c2a66ae712401317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f0016357440066eb4004d5d08009aba2002357420022a666ae68cdc3a4004004264932999aab9f001149854cd5ce249317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f00161533573892013f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f72001635573c0046aae74004dd50032999ab9a3370e9000001099191919191924ca666aae7c00452615335738921317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f0016357440066eb4004d5d08009aba2002357420022a66ae7124013f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f72001635573c0046aae74004dd500181"
      const distributionValidatorCbor = "5902185902150100002223232323232323232323232325333573466e1d200200215333573466ebcd5d09aba23235573c6ea800403cd5d0991aab9e375400201c2930b0a99ab9c4914b5061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f446973747269627574696f6e56616c696461746f722e68733a36343a352d3432001635573c0046aae74004dd51aba135744002646aae78dd5000804a999ab9a3370e900000109919191924ca666aae7c004526153357389201317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f0016357440066eb4004d5d08008a99ab9c49013f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f72001635573c0046aae74004dd50032999ab9a3370e9000001099191919191924ca666aae7c00452615335738921317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f0016357440066eb4004d5d08009aba2002357420022a66ae7124013f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f72001635573c0046aae74004dd500181"
      const ownerAddress = lucid.wallet.address 

      const preMinting : MintingPolicy = {type:"PlutusV2", script: preMintingCbor}
      const preMintingCS = lucid.utils.mintingPolicyToId(preMinting) // currency Symbol from Validator

      const preMetadataValidator : SpendingValidator = 
        {type:"PlutusV2", script: preMetadataValidatorCbor}// applyParamsToScript(preMetadataValidatorCbor, [preMintingCS])} // if it requires CS param
      const metadataControlAddress = lucid.utils.validatorToAddress(preMetadataValidator)

      const distributionValidator : SpendingValidator =
        {type:"PlutusV2", script: distributionValidatorCbor}
      const distributionAddress = lucid.utils.validatorToAddress(distributionValidator) // distribution address form users to redeem NFT

      const metadata : NFTMetadata = {
        name: "ThirdToken",
        image: "ipfs://QmSAkzP1DTvGe6n2EQB45LWN7wkT2hKDbFc8oga1LcHsvx"
      }

      const tokenName = fromText("ThirdToken")
      const metadataDatum = Data.to<DatumMetadata>({
          metadata: Data.castFrom<Metadata222>(Data.fromJson(metadata), Metadata222),
          version: BigInt(1),
        }, DatumMetadata)

      const txHash = await lucid.newTx()
        .collectFrom([utxos[0]])
        .mintAssets({
          [toUnit(preMintingCS, tokenName, 100)]: BigInt(1),
          [toUnit(preMintingCS, tokenName, 222)]: BigInt(1)
        }, Data.to(BigInt(0)))
        .payToContract(metadataControlAddress, metadataDatum, {[toUnit(preMintingCS, tokenName, 100)]: BigInt(1)})
        .payToContract(distributionAddress, metadataDatum, {[toUnit(preMintingCS, tokenName, 222)]: BigInt(1)})
        .attachMintingPolicy(preMinting)
        .complete()
        .then((tx) => tx.sign().complete())
        .then((tx) => tx.submit())
      console.log(txHash)
    }
  }
